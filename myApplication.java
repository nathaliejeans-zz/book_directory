package com.codename1.itemdirectory;


import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Image;
import static com.codename1.ui.TextArea.NUMERIC;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import java.util.ArrayList;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
    ArrayList<Book> booktemp = new ArrayList<Book>();

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });     
        
        Util.register("Book", Book.class);
        Storage s = Storage.getInstance();
        ArrayList<Book> myList = (ArrayList<Book>)s.readObject("ListBook");
        if(myList==null)
            s.writeObject("ListBook", booktemp);
        else
            booktemp=myList;
    } 
     
         public void start() {
                 
         if(current != null){
             current.show();
             return;
         }
                 
        Form newinfoForm = new Form("BOOK DIRECTORY", BoxLayout.y());
        newinfoForm.show();
        
        final TextField name = new TextField();
        name.setHint("Insert Book Name");

        final TextField author = new TextField();
        author.setHint("Insert Author");
        
        final TextField genre = new TextField(); 
        genre.setHint("Insert Genre");
        genre.setConstraint(TextField.EMAILADDR);
        
        final TextField year = new TextField();
        year.setHint("Insert Release Year");
        year.setConstraint(NUMERIC);
        
        final TextField pages = new TextField();
        pages.setHint("Insert Number of Pages");
        pages.setConstraint(NUMERIC);
       
        Button save = new Button ("Save Entry");
        Button list = new Button ("View List");
        
        newinfoForm.add(name);
        newinfoForm.add(author);
        newinfoForm.add(genre);
        newinfoForm.add(year);
        newinfoForm.add(pages);
        newinfoForm.add(save);
        newinfoForm.add(list);
        
        Storage s = Storage.getInstance();
      
       save.addActionListener((ActionListener) (ActionEvent evt) -> {
          if(name.getText()=="" || author.getText()=="" || genre.getText()=="") 
          {
              Dialog.show("Error", "Sufficient information not entered.", "OK", null);
              return;
          } 
          else
          {
              Book b = new Book();
              String name1 = name.getText();
              b.setName(name.getText());
              b.setAuthor(author.getText());
              b.setGenre(genre.getText());
              if (year.getText()=="")
                  b.setYear(0);          
              else
               b.setYear(Integer.parseInt(year.getText()));
              if (pages.getText()=="")
                  b.setPages(0);          
              else
               b.setPages(Integer.parseInt(pages.getText()));
         
              booktemp.add(b);
          
              Storage.getInstance().writeObject("ListBook", booktemp);
              Dialog.show("CONFIRMATION", "Added title " + name1 + " in the directory.", "OK", null);
          }
          });
       
      final Form form2 = new Form("List of Books");
      form2.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
      
      list.addActionListener((ActionListener)(ActionEvent e)->{
         
          int nIndex = booktemp.size();
          Button [] btn = new Button[nIndex];
          Button btnretour = new Button ("Return");
          
          for (int i=0; i<booktemp.size(); i++)
          {
              String myName = booktemp.get(i).getName() + " " + booktemp.get(i).getAuthor();
              
              btn[i] = new Button(myName);
              String info = "Book :" +myName;
              info = info+ "\n";
              info = info+ "Author: " +booktemp.get(i).getAuthor();
              info = info+ "\n";
              info = info+ "Genre: " +booktemp.get(i).getGenre();
              info = info+ "\n";
              info = info+ "Year: " +booktemp.get(i).getYear();
              info = info+ "\n";
              info = info+ "Pages: " +booktemp.get(i).getPages();
              
              final String ab=info;
              
              btn[i].addActionListener((ActionListener)(ActionEvent EV) -> {
                Dialog.show("Details", ab, "OK", null);            
    });
    form2.add(btn[i]);
    
    }
    btnretour.addActionListener(w->{form2.removeAll(); 
    newinfoForm.showBack();
    
    });
    
    form2.add(btnretour);
        form2.show(); 
      
      });
    }
   
    
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
        
    }

    }
